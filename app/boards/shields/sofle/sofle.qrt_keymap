/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/mouse.h>


#define BASE 0
#define LOWER 1
#define MID 2
#define RAISE 3
#define FUNC 4
#define ADJUST 5




/ {
    // Activate ADJUST layer by pressing raise and lower

    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjust_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <ADJUST>;
        };
    };

    macros {
        cut_macro: cut_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <40>;
            bindings =
                <&macro_press &kp LEFT_CONTROL>,
                <&macro_tap &kp X>,
                <&macro_release &kp LEFT_CONTROL>;

            label = "CUT_MACRO";
        };

        copy_macro: copy_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <40>;
            bindings =
                <&macro_press &kp LEFT_CONTROL>,
                <&macro_tap &kp C>,
                <&macro_release &kp LEFT_CONTROL>;

            label = "COPY_MACRO";
        };

        paste_macro: paste_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <40>;
            bindings =
                <&macro_press &kp LEFT_CONTROL>,
                <&macro_tap &kp V>,
                <&macro_release &kp LEFT_CONTROL>;

            label = "PASTE_MACRO";
        };

        left_tab_macro: left_tab_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <40>;
            bindings =
                <&macro_press &kp LEFT_CONTROL &kp LEFT_SHIFT>,
                <&macro_tap &kp TAB>,
                <&macro_release &kp LEFT_SHIFT &kp LEFT_CONTROL>;

            label = "LEFT_TAB_MACRO";
        };

        right_tab_macro: right_tab_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <40>;
            bindings =
                <&macro_press &kp LEFT_CONTROL>,
                <&macro_tap &kp TAB>,
                <&macro_release &kp LEFT_CONTROL>;

            label = "RIGHT_TAB_MACRO";
        };

        new_tab_macro: new_tab_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <40>;
            bindings =
                <&macro_press &kp LEFT_CONTROL>,
                <&macro_tap &kp T>,
                <&macro_release &kp LEFT_CONTROL>;

            label = "NEW_TAB_MACRO";
        };

        close_win_macro: close_win_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press &kp LEFT_CONTROL>,
                <&macro_tap &kp W>,
                <&macro_release &kp LEFT_CONTROL>;

            label = "CLOSE_WIN_MACRO";
        };

        reopen_tab_macro: reopen_tab_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <40>;
            bindings =
                <&macro_press &kp LEFT_CONTROL &kp LEFT_SHIFT>,
                <&macro_tap &kp T>,
                <&macro_release &kp LEFT_SHIFT &kp LEFT_CONTROL>;

            label = "REOPEN_TAB_MACRO";
        };
    };


        keymap {
            compatible = "zmk,keymap";

            default_layer {
                label = "default";
                bindings = <
    &kp ESC    &kp N1     &kp N2     &kp N3    &kp N4    &kp N5                          &kp N6     &kp N7    &kp N8    &kp N9   &kp N0     &kp DEL
    &kp TAB    &kp Q      &kp W    &kp E    &kp R     &kp T                              &kp Y      &kp U     &kp I     &kp O    &kp P      &kp BSLH
    &kp LSHFT  &kp A      &kp S    &kp D    &kp F     &kp G                              &kp H      &kp J     &kp K     &kp L    &kp SEMI   &kp RET
    &kp LCTRL  &kp Z      &kp X    &kp C    &kp V     &kp B      &kp C_MUTE    &none     &kp N      &kp M     &kp COMMA &kp DOT  &kp FSLH   &kp RSHFT
                          &mo 3      &mo 4    &kp LALT    &kp LGUI   &mo 3         &mo 1  &kp SPACE  &mo 2   &kp LEFT_BRACKET  &kp RIGHT_BRACKET
                >;

                sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
            };

            lower_layer {
                label = "lower";
                bindings = <
    &trans    &kp F1    &kp F2     &kp F3       &kp F4    &kp F5                                  &kp F6                 &kp F7        &kp F8        &kp MINUS     &kp EQUAL  &kp DELETE
    &kp TAB   &kp N1    &kp N2     &kp N3       &kp N4    &kp LEFT_BRACKET                        &kp RIGHT_BRACKET      &kp N7        &kp N8        &kp N9        &kp N0     &kp F12
    &kp CAPS  &kp EXCL  &kp AT     &kp HASH     &kp DLLR  &kp LEFT_BRACE                          &kp RIGHT_BRACE        &kp NUMBER_4  &kp N5        &kp N6        &kp SQT    &kp PIPE
    &trans    &kp SQT   &kp MINUS  &kp KP_PLUS  &kp LBRC  &kp LEFT_PARENTHESIS  &trans    &trans  &kp RIGHT_PARENTHESIS  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp MINUS  &trans
                        &trans     &trans       &trans    &trans                &mo 3     &trans  &kp SPACE              &mo 2         &trans        &trans
                >;

                sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
            };

            mid_layer {
                label = "mid";
                bindings = <
    &kp F12            &kp F1           &kp F2           &kp F3           &kp F4           &kp F5                                     &kp F6  &kp F7  &kp F8          &kp F9          &kp F10          &kp F11
    &ext_power EP_TOG  &rgb_ug RGB_HUD  &rgb_ug RGB_HUI  &rgb_ug RGB_SAD  &rgb_ug RGB_SAI  &rgb_ug RGB_EFF                            &none   &none   &none           &kp UP_ARROW    &none            &none
    &none              &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &none            &none            &none                                      &none   &none   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &none
    &none              &none            &none            &none            &none            &rgb_ug RGB_TOG            &rgb_ug RGB_TOG    &none  &none   &none   &none           &none           &none            &none
                                        &none            &none            &none            &none            &none              &none  &none   &mo 2   &none           &none
                >;
            };

            raise_layer {
                label = "raise";
                bindings = <
    &bt BT_CLR  &bt BT_SEL 0     &bt BT_SEL 1       &bt BT_SEL 2      &bt BT_SEL 3  &bt BT_SEL 4                    &trans     &trans    &trans    &trans     &trans   &trans
    &trans      &kp INS          &reopen_tab_macro  &kp K_CMENU       &trans        &paste_macro                    &kp PG_UP  &trans    &kp UP    &trans     &kp N0   &trans
    &trans      &left_tab_macro  &new_tab_macro     &right_tab_macro  &trans        &copy_macro                     &kp PG_DN  &kp LEFT  &kp DOWN  &kp RIGHT  &kp DEL  &kp BSPC
    &trans      &kp K_UNDO       &close_win_macro   &kp K_COPY        &kp K_PASTE   &cut_macro    &trans    &trans  &trans     &trans    &trans    &trans     &trans   &trans
                                 &mo 3              &trans            &trans        &trans        &mo 3     &trans  &trans     &trans    &trans    &trans
                >;

                sensor-bindings = <&inc_dec_kp LS(LA(C_VOL_UP)) LS(LA(C_VOL_DN)) &inc_dec_kp PG_UP PG_DN>;
            };


            adjust {
                bindings = <
    &trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
    &trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
    &trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
    &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                    &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                >;
            };

            func_layer {
            label = "func";
                bindings = <
                    &trans  &kp F1 &kp F2 &kp F3 &kp F4 &kp F5                        &kp F6  &kp F7  &kp F8  &kp F9  &kp F10 &trans
                    &trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                    &trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                    &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                    &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                        >;
            };




        };
    };
